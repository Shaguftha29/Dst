{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a4e747c2-c120-4035-85ab-7d0948c4c497",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.datasets import fetch_california_housing\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f4d9ce9f-26e4-4d48-a61c-0b0726d5d94f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loading California Housing dataset...\n",
      "Dataset loaded. Number of samples: 20640, Number of features: 8\n",
      "\n",
      "First 5 rows of features (X):\n",
      "   MedInc  HouseAge  AveRooms  AveBedrms  Population  AveOccup  Latitude  \\\n",
      "0  8.3252      41.0  6.984127   1.023810       322.0  2.555556     37.88   \n",
      "1  8.3014      21.0  6.238137   0.971880      2401.0  2.109842     37.86   \n",
      "2  7.2574      52.0  8.288136   1.073446       496.0  2.802260     37.85   \n",
      "3  5.6431      52.0  5.817352   1.073059       558.0  2.547945     37.85   \n",
      "4  3.8462      52.0  6.281853   1.081081       565.0  2.181467     37.85   \n",
      "\n",
      "   Longitude  \n",
      "0    -122.23  \n",
      "1    -122.22  \n",
      "2    -122.24  \n",
      "3    -122.25  \n",
      "4    -122.25  \n",
      "\n",
      "First 5 values of target (y):\n",
      "0    4.526\n",
      "1    3.585\n",
      "2    3.521\n",
      "3    3.413\n",
      "4    3.422\n",
      "Name: MedHouseVal, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Load the California Housing dataset\n",
    "# This dataset is commonly used for regression tasks and is suitable for linear regression.\n",
    "print(\"Loading California Housing dataset...\")\n",
    "california_housing = fetch_california_housing(as_frame=True)\n",
    "X = california_housing.data  # Features\n",
    "y = california_housing.target # Target variable (median house value)\n",
    "\n",
    "print(f\"Dataset loaded. Number of samples: {X.shape[0]}, Number of features: {X.shape[1]}\")\n",
    "print(\"\\nFirst 5 rows of features (X):\")\n",
    "print(X.head())\n",
    "print(\"\\nFirst 5 values of target (y):\")\n",
    "print(y.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9156e9dc-cb13-492d-a85a-61b219f918b3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Splitting data into training and testing sets...\n",
      "Training set size: 16512 samples\n",
      "Testing set size: 4128 samples\n"
     ]
    }
   ],
   "source": [
    "# Split the data into training and testing sets\n",
    "# We'll use 80% of the data for training and 20% for testing.\n",
    "# random_state ensures reproducibility of the split.\n",
    "print(\"\\nSplitting data into training and testing sets...\")\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "print(f\"Training set size: {X_train.shape[0]} samples\")\n",
    "print(f\"Testing set size: {X_test.shape[0]} samples\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4a08981b-0aac-4298-9d55-5a3bcfce1212",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Initializing and training the Linear Regression model...\n",
      "Model training complete.\n"
     ]
    }
   ],
   "source": [
    "# Initialize and train the Multiple Linear Regression model\n",
    "# LinearRegression from scikit-learn fits a linear model with coefficients\n",
    "# w = (w_1, ..., w_p) to minimize the residual sum of squares between the\n",
    "# observed targets in the dataset, and the targets predicted by the linear approximation.\n",
    "print(\"\\nInitializing and training the Linear Regression model...\")\n",
    "model = LinearRegression()\n",
    "model.fit(X_train, y_train)\n",
    "print(\"Model training complete.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "26e0984f-1c66-46c4-a880-9a83767a81b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Model Coefficients:\n",
      "MedInc: 0.4487\n",
      "HouseAge: 0.0097\n",
      "AveRooms: -0.1233\n",
      "AveBedrms: 0.7831\n",
      "Population: -0.0000\n",
      "AveOccup: -0.0035\n",
      "Latitude: -0.4198\n",
      "Longitude: -0.4337\n",
      "Intercept: -37.0233\n"
     ]
    }
   ],
   "source": [
    "# Print the coefficients and intercept\n",
    "print(\"\\nModel Coefficients:\")\n",
    "for feature, coef in zip(X.columns, model.coef_):\n",
    "    print(f\"{feature}: {coef:.4f}\")\n",
    "print(f\"Intercept: {model.intercept_:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bedd6eeb-7a40-4ba6-85d8-47caf1096b5c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Making predictions on the test set...\n",
      "Predictions made.\n"
     ]
    }
   ],
   "source": [
    "# Make predictions on the test set\n",
    "print(\"\\nMaking predictions on the test set...\")\n",
    "y_pred = model.predict(X_test)\n",
    "print(\"Predictions made.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f4493016-5b70-4a09-b35b-64758a6828df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Evaluating model performance:\n",
      "Mean Absolute Error (MAE): 0.5332\n",
      "Mean Squared Error (MSE): 0.5559\n",
      "Root Mean Squared Error (RMSE): 0.7456\n",
      "R-squared ($R^2$): 0.5758\n"
     ]
    }
   ],
   "source": [
    "# Evaluate the model's performance\n",
    "# Mean Absolute Error (MAE): Average of the absolute errors. It is a measure of errors between paired observations expressing the same phenomenon.\n",
    "# Mean Squared Error (MSE): Average of the squares of the errors. It is a measure of the average of the squares of the errors or deviations. It penalizes larger errors more.\n",
    "# R-squared ($R^2$): Represents the proportion of the variance in the dependent variable that is predictable from the independent variables. A higher R-squared value indicates a better fit.\n",
    "print(\"\\nEvaluating model performance:\")\n",
    "mae = mean_absolute_error(y_test, y_pred)\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "rmse = np.sqrt(mse) # Root Mean Squared Error for easier interpretation (same units as target)\n",
    "r2 = r2_score(y_test, y_pred)\n",
    "\n",
    "print(f\"Mean Absolute Error (MAE): {mae:.4f}\")\n",
    "print(f\"Mean Squared Error (MSE): {mse:.4f}\")\n",
    "print(f\"Root Mean Squared Error (RMSE): {rmse:.4f}\")\n",
    "print(f\"R-squared ($R^2$): {r2:.4f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "deeb5107-c3c7-491a-aef3-99cb111aa786",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
